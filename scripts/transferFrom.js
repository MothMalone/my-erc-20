const hre = require("hardhat");

async function main() {
    // ========================================
    // C·∫§U H√åNH - Thay ƒë·ªïi theo nhu c·∫ßu c·ªßa b·∫°n
    // ========================================
    
    const contractAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3"; // Contract address
    
    // Index c·ªßa account trong hardhat (0 = owner, 1 = account1, 2 = account2, ...)
    const spenderIndex = 1; // Account ƒë∆∞·ª£c ph√™ duy·ªát (account1)
    const fromIndex = 0;     // Account ch·ªß s·ªü h·ªØu token (owner)
    const toIndex = 2;       // Account ng∆∞·ªùi nh·∫≠n (account2)
    
    const transferAmount = "500"; // S·ªë l∆∞·ª£ng token mu·ªën chuy·ªÉn
    
    // ========================================
    
    console.log("\nüîÑ B·∫ÆT ƒê·∫¶U CHUY·ªÇN TOKEN B·∫∞NG transferFrom()\n");
    console.log("=" .repeat(60));
    
    // L·∫•y c√°c accounts
    const accounts = await hre.ethers.getSigners();
    const owner = accounts[fromIndex];
    const spender = accounts[spenderIndex];
    const recipient = accounts[toIndex];
    
    console.log("\nüìã TH√îNG TIN T√ÄI KHO·∫¢N:");
    console.log(`   Owner (t·ª´):      ${owner.address}`);
    console.log(`   Spender (th·ª±c hi·ªán): ${spender.address}`);
    console.log(`   Recipient (ƒë·∫øn): ${recipient.address}`);
    
    // K·∫øt n·ªëi v·ªõi contract
    const TranMinhNam23021646_Token = await hre.ethers.getContractFactory("TranMinhNam23021646_Token");
    const token = TranMinhNam23021646_Token.attach(contractAddress);
    
    console.log(`\nüìÑ Contract: ${contractAddress}`);
    
    try {
        // Ki·ªÉm tra s·ªë d∆∞ tr∆∞·ªõc
        console.log("\n" + "=".repeat(60));
        console.log("üìä S·ªê D∆Ø TR∆Ø·ªöC KHI CHUY·ªÇN:");
        console.log("=".repeat(60));
        
        const ownerBalanceBefore = await token.balanceOf(owner.address);
        const spenderBalanceBefore = await token.balanceOf(spender.address);
        const recipientBalanceBefore = await token.balanceOf(recipient.address);
        
        console.log(`   Owner:     ${hre.ethers.formatEther(ownerBalanceBefore)} TMN`);
        console.log(`   Spender:   ${hre.ethers.formatEther(spenderBalanceBefore)} TMN`);
        console.log(`   Recipient: ${hre.ethers.formatEther(recipientBalanceBefore)} TMN`);
        
        // Ki·ªÉm tra allowance
        console.log("\n" + "=".repeat(60));
        console.log("üîç KI·ªÇM TRA ALLOWANCE:");
        console.log("=".repeat(60));
        
        const allowance = await token.allowance(owner.address, spender.address);
        const allowanceFormatted = hre.ethers.formatEther(allowance);
        
        console.log(`   S·ªë token spender ƒë∆∞·ª£c ph√©p chi ti√™u: ${allowanceFormatted} TMN`);
        
        // Ki·ªÉm tra xem c√≥ ƒë·ªß allowance kh√¥ng
        const amount = hre.ethers.parseEther(transferAmount);
        
        if (allowance < amount) {
            console.log("\n‚ùå L·ªñI: Allowance kh√¥ng ƒë·ªß!");
            console.log(`   C·∫ßn: ${transferAmount} TMN`);
            console.log(`   C√≥:  ${allowanceFormatted} TMN`);
            console.log("\nüí° H∆Ø·ªöNG D·∫™N:");
            console.log("   1. S·ª≠ d·ª•ng Web UI ƒë·ªÉ approve token cho spender");
            console.log("   2. Ho·∫∑c ch·∫°y script approve ri√™ng");
            console.log(`   3. Owner ph·∫£i approve √≠t nh·∫•t ${transferAmount} TMN cho Spender`);
            return;
        }
        
        console.log("   ‚úÖ Allowance ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch");
        
        // Th·ª±c hi·ªán transferFrom
        console.log("\n" + "=".repeat(60));
        console.log("üöÄ TH·ª∞C HI·ªÜN CHUY·ªÇN TOKEN:");
        console.log("=".repeat(60));
        console.log(`   S·ªë l∆∞·ª£ng: ${transferAmount} TMN`);
        console.log(`   T·ª´:       ${owner.address}`);
        console.log(`   ƒê·∫øn:      ${recipient.address}`);
        console.log(`   Th·ª±c hi·ªán b·ªüi: ${spender.address}`);
        
        // Connect contract v·ªõi spender ƒë·ªÉ g·ªçi transferFrom
        const tokenAsSpender = token.connect(spender);
        
        console.log("\n‚è≥ ƒêang g·ª≠i giao d·ªãch...");
        const tx = await tokenAsSpender.transferFrom(
            owner.address,
            recipient.address,
            amount
        );
        
        console.log(`   TX Hash: ${tx.hash}`);
        console.log("   ƒêang ch·ªù x√°c nh·∫≠n...");
        
        const receipt = await tx.wait();
        console.log(`   ‚úÖ Giao d·ªãch th√†nh c√¥ng! (Block: ${receipt.blockNumber})`);
        
        // Ki·ªÉm tra s·ªë d∆∞ sau
        console.log("\n" + "=".repeat(60));
        console.log("üìä S·ªê D∆Ø SAU KHI CHUY·ªÇN:");
        console.log("=".repeat(60));
        
        const ownerBalanceAfter = await token.balanceOf(owner.address);
        const spenderBalanceAfter = await token.balanceOf(spender.address);
        const recipientBalanceAfter = await token.balanceOf(recipient.address);
        
        console.log(`   Owner:     ${hre.ethers.formatEther(ownerBalanceAfter)} TMN`);
        console.log(`   Spender:   ${hre.ethers.formatEther(spenderBalanceAfter)} TMN`);
        console.log(`   Recipient: ${hre.ethers.formatEther(recipientBalanceAfter)} TMN`);
        
        // Hi·ªÉn th·ªã thay ƒë·ªïi
        console.log("\n" + "=".repeat(60));
        console.log("üìà THAY ƒê·ªîI:");
        console.log("=".repeat(60));
        
        const ownerChange = ownerBalanceAfter - ownerBalanceBefore;
        const recipientChange = recipientBalanceAfter - recipientBalanceBefore;
        
        console.log(`   Owner:     ${hre.ethers.formatEther(ownerChange)} TMN`);
        console.log(`   Recipient: +${hre.ethers.formatEther(recipientChange)} TMN`);
        
        // Ki·ªÉm tra allowance m·ªõi
        const newAllowance = await token.allowance(owner.address, spender.address);
        const newAllowanceFormatted = hre.ethers.formatEther(newAllowance);
        
        console.log("\n" + "=".repeat(60));
        console.log("üîç ALLOWANCE M·ªöI:");
        console.log("=".repeat(60));
        console.log(`   C√≤n l·∫°i: ${newAllowanceFormatted} TMN`);
        
        console.log("\n" + "=".repeat(60));
        console.log("‚úÖ HO√ÄN T·∫§T!");
        console.log("=".repeat(60) + "\n");
        
    } catch (error) {
        console.error("\n‚ùå L·ªñI X·∫¢Y RA:");
        console.error("   ", error.message);
        
        if (error.message.includes("insufficient allowance")) {
            console.log("\nüí° Nguy√™n nh√¢n: Allowance kh√¥ng ƒë·ªß");
            console.log("   Gi·∫£i ph√°p: Owner c·∫ßn approve th√™m token cho Spender");
        } else if (error.message.includes("transfer amount exceeds balance")) {
            console.log("\nüí° Nguy√™n nh√¢n: Owner kh√¥ng c√≥ ƒë·ªß token");
            console.log("   Gi·∫£i ph√°p: Owner c·∫ßn c√≥ ƒë·ªß s·ªë d∆∞ token");
        }
    }
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    });